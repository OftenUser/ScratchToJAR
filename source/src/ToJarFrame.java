import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import java.util.zip.*;
import javax.swing.*;
import javax.swing.GroupLayout.*;
import javax.swing.LayoutStyle.*;

public class ToJarFrame extends JFrame {

    /** Creates new form ToJarFrame */
    public ToJarFrame() {
        initComponents();
        outputTarget.setText(System.getProperty("user.home") + System.getProperty("file.separator") + "ScratchBugOnAPlate.jar");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code"> // GEN-BEGIN:initComponents
    private void initComponents() {

        addressLabel = new JLabel();
        titleLabel = new JLabel();
        address = new JTextField();
        title = new JTextField();
        compile = new JButton();
        targetLabel = new JLabel();
        outputTarget = new JTextField();
        select = new JButton();
        progress = new JProgressBar();
        selectButton = new JButton();

        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.setTitle("ScratchToJAR");
        this.setLocationByPlatform(true);
        this.setResizable(false);

        addrLabel.setText("Project:");

        titleLabel.setText("Title:");

        address.setText("C:/scratch-project.sb");

        title.setText("Bug on a plate by bernatp");

        compile.setText("Compile");
        compile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                compileActionPerformed(event);
            }
        });

        targetLabel.setText("Target:");

        outputTarget.setText("C:/");

        select.setText("Select");
        select.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                selectActionPerformed(event);
            }
        });

        selectButton.setText("Select");
        selectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                selectButtonActionPerformed(event);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(addressLabel)
                    .addComponent(titleLabel, GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(targetLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(progress, GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(compile))
                    .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(outputTarget, GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(select))
                    .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                            .addComponent(title, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                            .addComponent(address, GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(selectButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(addressLabel)
                    .addComponent(address, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectButton))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(title, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(select)
                    .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(outputTarget, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(targetLabel)))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(compile)
                    .addComponent(progress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    } // </editor-fold>//GEN-END:initComponents
    private JFileChooser fileChooser = new JFileChooser();

    private void selectActionPerformed(ActionEvent event) { // GEN-FIRST:event_selectActionPerformed
        fileChooser.showSaveDialog(this);
        File selected = fileChooser.getSelectedFile();
        if (selected != null) {
            outputTarget.setText(selected.getAbsolutePath());
        }
    } // GEN-LAST:event_selectActionPerformed

    private void compileActionPerformed(ActionEvent event) { // GEN-FIRST:event_compileActionPerformed
        progress.setIndeterminate(true);
        outputTarget.setEditable(false);
        try {
            ZipOutputStream output = new ZipOutputStream(new FileOutputStream(outputTarget.getText()));
            ZipInputStream input = new ZipInputStream(ToJarFrame.class.getResourceAsStream("ScratchDesktop.dat"));
            ZipEntry entry;
            byte[] buf = new byte[1024];
            int len;
            while ((entry = input.getNextEntry()) != null) {
                output.putNextEntry(new ZipEntry(entry.getName()));
                if (!entry.getName().equals("config.xml") && !entry.getName().equals("project.dat")) {
                    while ((len = input.read(buf)) != -1) {
                        output.write(buf, 0, len);
                    }
                } else {
                    if (entry.getName().equals("project.dat")) {
                        FileInputStream fileInputStream = new FileInputStream(address.getText());
                        while ((len = fileInputStream.read(buf)) != -1) {
                            output.write(buf, 0, len);
                        }
                        fileInputStream.close();
                    } else {
                        Properties properties = new Properties();
                        properties.setProperty("title", title.getText());
                        // properties.setProperty("codebase", "http://scratch.mit.edu/");
                        // properties.setProperty("project", "projects/" + address.getText() + "/downloadsb");
                        properties.setProperty("project", "project.dat");
                        properties.setProperty("autostart", "true");
                        properties.setProperty("compiler-version", "1.1");
                        properties.setProperty("compiler-time", System.currentTimeMillis() + "");
                        properties.storeToXML(output, null);
                    }
                }
                output.closeEntry();
                input.closeEntry();
            }
            input.close();
            output.close();
            JOptionPane.showMessageDialog(this, "Sucessfully Created:\n" + outputTarget.getText());
            Runtime.getRuntime().exec(new String[]{"java", "-jar", outputTarget.getText()});
        } catch (Exception exception) {
            JOptionPane.showMessageDialog(this, "Error: " + exception, "Error", JOptionPane.ERROR_MESSAGE);
        }
        outputTarget.setEditable(true);
        progress.setIndeterminate(false);
    } // GEN-LAST:event_compileActionPerformed

    private void selectButtonActionPerformed(ActionEvent event) { // GEN-FIRST:event_selectButtonActionPerformed
        fileChooser.showOpenDialog(this);
        if (fileChooser.getSelectedFile() != null) {
            address.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    } // GEN-LAST:event_selectButtonActionPerformed

    private boolean isInteger(String string) {
        try {
            Integer.valueOf(string);
            return true;
        } catch (NumberFormatException exception) {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException exception) {
            Logger.getLogger(ToJarFrame.class.getName()).log(Level.SEVERE, null, exception);
        } catch (InstantiationException exception) {
            Logger.getLogger(ToJarFrame.class.getName()).log(Level.SEVERE, null, exception);
        } catch (IllegalAccessException exception) {
            Logger.getLogger(ToJarFrame.class.getName()).log(Level.SEVERE, null, exception);
        } catch (UnsupportedLookAndFeelException exception) {
            Logger.getLogger(ToJarFrame.class.getName()).log(Level.SEVERE, null, exception);
        }
        // </editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ToJarFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - Do not modify // GEN-BEGIN:variables
    private JLabel addressLabel;
    private JTextField address;
    private JButton compile;
    private JButton selectButton;
    private JTextField outputTarget;
    private JProgressBar progress;
    private JButton select;
    private JLabel targetLabel;
    private JTextField title;
    private JLabel titleLabel;
    // End of variables declaration // GEN-END:variables
}
